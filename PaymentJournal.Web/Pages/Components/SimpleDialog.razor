@using MudBlazor
@inject IDialogService DialogService

<MudDialog>
    <DialogContent>
        <MudText Typo="Typo.h6">@ContentText</MudText>
    </DialogContent>

    <DialogActions>
        <MudButton Color="@Color" OnClick="Submit">@ButtonText</MudButton>
        <MudButton Color="Color.Secondary" OnClick="Cancel">Cancel</MudButton>
    </DialogActions>
</MudDialog>
@* <p>@(MudDialogInstance is null ? "DialogReference is null" : "DialogReference is alive!")</p> *@

@code {
    [CascadingParameter] public IMudDialogInstance  MudDialogInstance  { get; set; }
    [CascadingParameter] public DialogParameters Parameters { get; set; }

    [Parameter] public string ContentText { get; set; }
    [Parameter] public string ButtonText { get; set; }
    [Parameter] public Color Color { get; set; }

    protected override void OnInitialized()
    {
        ContentText = Parameters.Get<string>("ContentText");
    }

    void Submit()
    {
        MudDialogInstance.Close(DialogResult.Ok(true));
    }

    void Cancel()
    {
        MudDialogInstance.Close(DialogResult.Cancel());
        
    }
}


@* <MudDialog> *@
@*     <DialogContent> *@
@*         <MudText>@ContentText</MudText> *@
@*     </DialogContent> *@
@*     <DialogActions> *@
@*         <MudButton OnClick="Cancel">Cancel</MudButton> *@
@*         <MudButton Color="@Color" Variant="Variant.Filled" OnClick="Submit">@ContentText</MudButton> *@
@*     </DialogActions> *@
@* </MudDialog> *@
@* *@
@* *@
@* @code { *@
@*     [CascadingParameter] IDialogReference  MudDialog { get; set; } = null !; *@
@* *@
@*     [Parameter] public string ContentText { get; set; } = null !; *@
@* *@
@*     [Parameter] public string ButtonText { get; set; } = null !; *@
@* *@
@*     [Parameter] public Color Color { get; set; } *@
@* *@
@*     void Submit() => MudDialog.Close(DialogResult.Ok(true)); *@
@*     void Cancel() => MudDialog.Close(DialogResult.Cancel()); *@
@* } *@